{
    --------------------------------------------
    Filename: RF-Waterfall-Prop2.spin2
    Description: Display received power levels in the frequency domain
        as a "waterfall"
        Utilizes ISM-band transceiver IC's, e.g., the CC1101
    Author: Jesse Burt
    Copyright (c) 2020
    Started: Apr 6, 2020
    Updated: Apr 12, 2020
    See end of file for terms of use.
    --------------------------------------------
}
CON

    ' 250MHz
    XTAL            = cfg#XTAL
    XDIV            = 2
    XMUL            = 25
    XDIVP           = cfg#XDIVP
    XOSC            = cfg#XOSC
    XSEL            = cfg#XSEL
    XPPPP           = cfg#XPPPP
    CLOCKFREQ       = XTAL / XDIV * XMUL / XDIVP
    SETFREQ         = 1<<24 + (XDIV-1)<<18 + (XMUL-1)<<8 + XPPPP<<4 + XOSC<<2
    ENAFREQ         = SETFREQ + XSEL

    WIDTH           = 320
    HEIGHT          = 240
    XMAX            = WIDTH-1
    YMAX            = HEIGHT-1
    BUFFSZ          = WIDTH * HEIGHT
    BPP             = 1
    BPL             = WIDTH * BPP

    LABEL_COL       = 0
    DATA_COL        = 11
' User-modifiable constants
    CS_PIN          = 16
    SCK_PIN         = 18
    MOSI_PIN        = 19
    MISO_PIN        = 17
    SCK_FREQ        = 5_000_000

    SER_RX          = cfg#SER_RX
    SER_TX          = cfg#SER_TX
    SER_BAUD        = 2_000_000
    LED             = cfg#LED1

    VGA_BASEPIN     = 0                                     ' 0, 8, 16, 24, 32, 40, 48
'                                                           Works with all basepins on the P2ES except 56

VAR

    long _palette[255]
    byte _framebuffer[BUFFSZ]

    byte _ser_cog, _vga_cog, _cc1101_cog
    byte _offset

OBJ

    cfg         : "core.con.boardcfg.p2eval"
    ser         : "com.serial.terminal.ansi"
    time        : "time"
    io          : "io"
    vga         : "display.vga.bitmap-8bpp"
    int         : "string.integer"
    fnt         : "font.5x8"
    cc1101      : "wireless.transceiver.cc1101.spi"

PUB Main | lna, dvga, x, y, wh, ww, base_freq, cmd, rxbw, intfreq

    Setup

    base_freq := 433_898_700                                    ' 300_000_000..348_000_000, 387_000_000..464_000_000, 779_000_000..928_000_000

    cc1101.Idle                                                 ' Change to Idle while changing settings
    cc1101.AutoCal(cc1101#IDLE_RXTX)
    cc1101.CarrierFreq(base_freq)
    cc1101.SyncMode(cc1101#SYNCMODE_3032_CS)
    cc1101.CarrierSense(14)
    cc1101.DVGAGain(-3)
    cc1101.LNAGain(-17)
    cc1101.RXBandwidth(58)
    cc1101.IntFreq(380859)
    cc1101.AGC(cc1101#AGC_NORMAL)
    cc1101.DCBlock(FALSE)
    cc1101.RXMode

    lna := dvga := rxbw := 0
    intfreq := 380859
    _offset := 175

' Waterfall position, width, height
    x := 0
    y := 20
    ww := 100
    wh := 100

    vga.position(0, 1)
    vga.fgcolor(255)
    vga.str(int.decpadded(cc1101.CarrierFreq, 9))
    vga.str(string("Hz"))
    vga.Box(x, y, x+ww, y+wh, 255, FALSE)                       ' Draw frame around waterfall
    DisplaySettings

    DrawScale(ww+5, y, wh)                                        ' Draw the color scale (for RSSI)

    repeat
        Waterfall(x, y, x+ww, y+wh, base_freq)

        if cmd := ser.rxcheck
            cc1101.Idle
            case cmd
                "=":
                    lna := (lna + 1) <# 7
                    cc1101.LNAGain(lookupz(lna: -17, -14, -11, -9, -7, -6, -2, 0))
                "-":
                    lna := (lna - 1) #> 0
                    cc1101.LNAGain(lookupz(lna: -17, -14, -11, -9, -7, -6, -2, 0))
                "]":
                    dvga := (dvga + 1) <# 7
                    cc1101.DVGAGain(lookupz(dvga: -3, -2, -1, 0))
                "[":
                    dvga := (dvga - 1) #> 0
                    cc1101.DVGAGain(lookupz(dvga: -3, -2, -1, 0))
                ";":
                    _offset := (_offset - 1) #> 138
                "'":
                    _offset := (_offset + 1) <# 255
                ".":
                    rxbw := (rxbw + 1) <# 15
                    cc1101.RXBandwidth(lookupz(rxbw: 58, 68, 81, 102, 116, 135, 162, 203, 232, 270, 325, 406, 464, 541, 650, 812))
                ",":
                    rxbw := (rxbw - 1) #> 0
                    cc1101.RXBandwidth(lookupz(rxbw: 58, 68, 81, 102, 116, 135, 162, 203, 232, 270, 325, 406, 464, 541, 650, 812))
                "p":
                    intfreq := (intfreq + 25390) <# 787109
                    cc1101.IntFreq(intfreq)
                "o":
                    intfreq := (intfreq - 25390) #> 25390
                    cc1101.IntFreq(intfreq)
                OTHER:
            cc1101.RXMode
            DisplaySettings                                     ' Update the settings display

    FlashLED(LED, 100)

PUB DisplaySettings | lna, dvga, rxbw, ifreq, pllcal

    lna := cc1101.LNAGain
    dvga := cc1101.DVGAGain
    rxbw := cc1101.RXBandwidth
    ifreq := cc1101.IntFreq
    pllcal := cc1101.PLLCalibration

    vga.position(LABEL_COL, 17)
    vga.printf("LNA Gain: ")
    vga.position(DATA_COL, 17)
    vga.printf("%ddB ", lna)

    vga.position(LABEL_COL, 18)
    vga.printf("DVGA Gain: ")
    vga.position(DATA_COL, 18)
    vga.printf("%ddB ", dvga)

    vga.position(LABEL_COL, 19)
    vga.printf("RX BW: ")
    vga.position(DATA_COL, 19)
    vga.printf("%dkHz ", rxbw)

    vga.position(LABEL_COL, 20)
    vga.printf("IF: ")
    vga.position(DATA_COL, 20)
    ifnot ifreq/1000 > (rxbw/2)
        vga.fgcolor(190)
    else
        vga.fgcolor(255)
    vga.printf("%dHz ", ifreq)
    vga.fgcolor(255)

    vga.position(LABEL_COL, 21)
    vga.printf("PLL: ")
    vga.position(DATA_COL, 21)
    vga.printf("%d ", pllcal)

PUB Waterfall(sx, sy, ex, ey, base_freq) | x, y, left, top, bottom, right, c, freqstep

    left := sx + 1
    top := sy + 1
    bottom := ey - 1
    right := ex - 1
    freqstep := 20 * 397                                         ' CC1101 Freq resolution is 397Hz

    repeat x from left to right
        cc1101.Carrierfreq(base_freq + (freqstep * (x-left)))
        c := 0 #> (cc1101.RSSI+_offset) <# 255
        vga.Plot(x, bottom, c)
    vga.ScrollUp(left, top, right, bottom)

PRI DrawScale(x, y, ht) | idx, color, scl_width, bottom, top, range
' Draw the color scale setup at program start
    range := bottom := y+ht
    top := y
    scl_width := 5

    repeat idx from bottom to top
        color := (range-idx) * 2                                ' Skip every other color in the scale
        vga.Line(x, idx, x+scl_width, idx, color)               '   so most of it can be fit on screen

PUB Setup

    clkset(ENAFREQ, CLOCKFREQ)
    repeat until _ser_cog := ser.StartRXTX(SER_RX, SER_TX, 0, SER_BAUD)
    ser.clear
    ser.printf("Serial terminal started - p2 @ %dMHz (cog %d)\n", clkfreq/1000000, _ser_cog)
    FullSpecPalette
'    GreyScalePalette
    if _vga_cog := vga.start(VGA_BASEPIN, @_framebuffer, @_palette, WIDTH, HEIGHT)
        ser.printf("VGA 8bpp driver started (cog %d)\n", _vga_cog)
        vga.FontAddress(fnt.BaseAddr)
        vga.FontSize(6, 8)
        vga.Clear
    else
        ser.printf("VGA 8bpp driver failed to start\n")
        repeat

    if _cc1101_cog := cc1101.Start (CS_PIN, SCK_PIN, MOSI_PIN, MISO_PIN, SCK_FREQ)
        ser.PrintF("CC1101 driver started (cog %d)\n", _cc1101_cog)
    else
        ser.PrintF("CC1101 driver failed to start - halting\n")
        FlashLED (LED, 500)

PUB GreyScalePalette | i

    repeat i from 0 to 255
        _palette[i] := 0 | (i << 16) | (i << 8) | i

PUB FullSpecPalette | i, r, g, b, c
' Set up palette
    r := g := b := c := 0
    repeat i from 0 to 255
        case i
            0..31:
                r += 4
                g := 0
                b += 4
            32..63:
                r -= 4
                g := 0
                b := b
            64..95:
                r := 0
                g += 4
                b := b
            96..127:
                r := 0
                g := g
                b -= 4
            128..159:
                r += 4
                g := g
                b := b
            160..191:
                r := r
                g -= 4
                b := 0
            192..254:
                r := r
                g += 4
                b += 4
            255:
                r := g := b := 255

        c := 0 | (r << 16) | (g << 8) | b
        _palette[i] := c
    _palette[0] := $00_00_00_00

#include "lib.utility.spin2"

{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}

